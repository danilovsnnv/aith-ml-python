version: '3.8'

services:
  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    container_name: webapp
    depends_on:
      - api-gateway
    ports:
      - "8000:8000"
    volumes:
     - ./webapp/logs:/logs
    environment:
     - PYTHONUNBUFFERED=1

  recommendations:
    build:
      context: ./recommendations
      dockerfile: Dockerfile
    container_name: recommendations
    ports:
      - "8001:8000"
    volumes:
      - ml_data:/src/data
      - ./recommendations/logs:/logs
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - dotenv_files/.env.database
      - dotenv_files/.env.redis

  interactions:
    build:
      context: ./interactions
      dockerfile: Dockerfile
    container_name: interactions
    ports:
      - "8002:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./interactions/logs:/logs
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - dotenv_files/.env.rabbitmq
      - dotenv_files/.env.redis

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: auth
    ports:
      - "8003:8000"
    depends_on:
      - database
    volumes:
      - ./auth/logs:/logs
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - dotenv_files/.env.database
      - dotenv_files/.env.security

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8004:8000"
    depends_on:
      - recommendations
      - interactions
      - auth
    volumes:
      - ./auth/logs:/logs
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - dotenv_files/.env.security

  regular-pipeline:
    build:
      context: ./regular-pipeline
      dockerfile: Dockerfile
    container_name: regular-pipeline
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ml_data:/src/data
    env_file:
      - dotenv_files/.env.rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # client
      - "15672:15672"  # management UI
    env_file:
      - dotenv_files/.env.rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    env_file:
      - dotenv_files/.env.redis
    command:
      [
        "redis-server",
        "--appendonly", "yes",
        "--appendfilename", "appendonly.aof",
        "--dir", "/data"
      ]

  database:
   image: postgres:15
   container_name: database
   env_file:
     - dotenv_files/.env.database
   ports:
     - "5432:5432"
   volumes:
     - postgresql_data:/var/lib/postgresql/data

volumes:
  logs:
  rabbitmq_data:
  redis_data:
    driver: local
  postgresql_data:
  ml_data:
